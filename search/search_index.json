{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Index","text":"<p>impload, aka inav Mission Plan Loader, is a cross-platform, command line tool to upload missions in  a number of file formats to inav. It can also download missions and convert between file formats.</p>"},{"location":"#mission-file-formats","title":"Mission File formats","text":"<p>impload supports the following file formats:</p> <ul> <li> <p>Multiwii XML: (MWXML) The mission file format used by inav mission planners such as mwp, ezgui, mission planner for inav and the inav configurator.</p> </li> <li> <p>APMPlanner2 text files: Mission files generated by APMPlanner (and older qgroundcontrol); \"QGC WPL 110\" files.</p> </li> <li> <p>qgroundcontrol JSON Plan files (recent versions of qgroundcontrol), simple mission and complex (survey).</p> </li> <li> <p>GPX: A common format often used for GPS information. impload works with GPX files containing tracks, routes or waypoints.</p> </li> <li> <p>KML (and KMZ): Another common format; the export format for a number of well known tools like Google Earth. Mission should be defined as 'paths'.</p> </li> <li> <p>mwp JSON: mission files.</p> </li> <li> <p>Simple CSV: See below for detail</p> </li> </ul>"},{"location":"#use-cases","title":"Use Cases","text":"<ul> <li> <p>Plan missions in apmplanner, (QGC WPL 110) upload (&amp; save) to iNav</p> </li> <li> <p>Plan missions in any GPX creating GIS tool</p> </li> <li> <p>Plan missions in Google Earth, save as KML, upload to FC</p> </li> <li> <p>Convert \"alien\" formats to MW-XML.</p> </li> </ul>"},{"location":"#youtube-tutorial","title":"Youtube tutorial","text":""},{"location":"#installation","title":"Installation","text":"<p>From source: <code>go get github.com/stronnag/impload</code>, binaries endup in <code>go/bin</code>, source in <code>go/src/github.com/stronnag/impload</code>. Requires <code>go</code> and <code>git</code>.</p> <p>Binaries in the Release area (linux ia32/x86_64/arm7, MacOS, FreeBSD) if you don\u2019t want it build it locally. The release area provides standalone binaries for ARM Linux (arm7), Linux on ia32 and x86_64, MacOS, and FreeBSD.</p>"},{"location":"#usage","title":"Usage","text":"<p>Run the executable for your platform in a terminal (Windows <code>cmd</code> or <code>powershell</code>). The majority of the examples are from Linux where the serial device should be auto-detected; the examples are also relevant to MacOS and Windows, however you will need to specifically define the serial device, e.g. <code>-d COM7</code> on Windows, <code>-d /dev/tty.usbmodem14211</code> on MacO (where 14221 is possibly a random number).</p> <pre><code>$ impload --help\nUsage of impload [options] command [files ...]\nOptions:\n -a int\n    Default altitude (m) (default 20)\n -b int\n    Baud rate (default 115200)\n -d string\n    Serial Device\n -fmt string\n    Output format (xml, json, md, cli, xml-ugly) (default \"xml\")\n -force-land\n    Adds RTH / Land for 'external' formats\n -force-rth\n    Adds RTH for 'external' formats\n -rebase string\n    rebase 1st WP to location (as lat,lon[,wpno,segno)\n -s float\n    Default speed (m/s)\n -v Shows version\n -verbose\n    Verbose\n command:\n   Action required (upload|download|store|restore|convert|test|clear|erase|multi[=n])\n\nimpload v5.162.398-4-ge63df6c, commit: e63df6c / 2023-10-14\n</code></pre>"},{"location":"#commands","title":"Commands","text":""},{"location":"#upload","title":"upload","text":"<p>The upload command uploads the specified file as a waypoint mission to the flight controller.</p>"},{"location":"#store","title":"store","text":"<p>The store command uploads the specified file as a waypoint mission to the flight controller and then instructs inav to save the mission to EEPROM.</p>"},{"location":"#download","title":"download","text":"<p>The download command downloads the waypoint mission in flight controller volatile memory to the specified file. The mission is always stored as an MW XML mission file.</p>"},{"location":"#restore","title":"restore","text":"<p>The restore command instructs the flight controller to restore a mission previously saved to EEPROM into volatile memory, and then downloads the mission to a file (as for the download command).</p>"},{"location":"#convert","title":"convert","text":"<p>The convert command converts the first file into an MW XML mission file with the second file name.</p>"},{"location":"#test","title":"test","text":"<p>The test command establishes communications with the flight controller and reports the FC name and build, as well as the contents of volatile mission memory.</p>"},{"location":"#clear","title":"clear","text":"<p>Removes any extant mission from volatile memory.</p>"},{"location":"#erase","title":"erase","text":"<p>Removes any extant mission from volatile memory and EEPROM.</p>"},{"location":"#multin","title":"multi[=n]","text":"<p>Gets (<code>multi</code>) or sets (<code>multi=n</code>) the current active multi-mission Id.</p>"},{"location":"#options","title":"Options","text":"<p>Options start with a hyphen and must precede the command being run. On Linux, impload will attempt to access <code>/dev/ttyACM0</code> and <code>/dev/ttyUSB0</code>, so the device does not need to be specified if using these device nodes. On Windows and MacOS, it is necessary to specify the device name / node.</p> <ul> <li> <p><code>-d device</code> : define the device name</p> </li> <li> <p><code>-b baudrate</code> : define the baud rate (if not 115200 baud)</p> </li> <li> <p><code>-a default-altitude</code> : sets the default altitude unless it\u2019s otherwise defined. MW XML mission files, apm mission files and CSV may define altitude values, so the default value given on the command line is only used for missing (zero) values. The value is in metres.</p> </li> <li> <p><code>-s default-speed</code> : defines the default speed. This is used where a leg speed is not set in the input mission file. MW XML mission file, mwp-json and QGC (apmplanner2, qgroundcontrol) are the only formats that specify a speed value. If not set, the mission is flown at the speed set in FC configuration.</p> </li> <li> <p><code>-force-rth</code> : For GPX only, adds RTH after the final waypoint.</p> </li> <li> <p><code>-force-land</code> : For GPX only, adds RTH with land after the final waypoint.</p> </li> </ul> <p>The <code>-rebase</code> option takes between 2 and 4 values, the first two are the latitude and longitude of the new base location. Without anything else, all new locations are based off WP1 in mission segment 1. The user can specify the WP number, and the multi-mission segment to be used in the third and forth parameters, for example <code>-rebase=35.762324,140.377314,2</code> would position WP2 of the relocated mission at the given location, with all other WPs relocated pro-rata.</p>"},{"location":"#device-names","title":"Device Names","text":"<p>impload supports a subset of the mwp device naming scheme:</p> <ul> <li> <p><code>serial_device[@baudrate]</code></p> </li> <li> <p><code>tcp://host:port</code></p> </li> <li> <p><code>udp://remotehost:remote_port</code></p> </li> <li> <p><code>udp://local_host:local_port/remote_host:remote_port</code> or <code>udp://remotehost:remote_port/?bind=port</code></p> </li> </ul> <p>The baud rate given as an extended device name is preferred to -b</p> <p>For ESP8266 transparent serial over UDP (the recommended mode for ESP8266), one of the latter forms is required, as the same port must be used locally and remotely.</p>"},{"location":"#device-name-examples","title":"Device Name examples","text":"<pre><code>/dev/ttyUSB0@57600\n/dev/ttyACM0\nCOM17@115200\ntcp://esp8266:23\nudp://:14014/esp-air:14014\n# both sides use port 14014, remote (FC) is esp-air, blank local name is understood as INADDR_ANY. Last above is same as:\nudp://esp-air:14014/?bind=14014\n</code></pre>"},{"location":"#files","title":"Files","text":"<p>The impload commands require zero, one or two file names. If file names are missing or are a single hyphen, then stdin (standard input) is used for readings and stdout (standard output) is used for writing. This allows pipelines to be used.</p>"},{"location":"#usage-examples","title":"Usage Examples","text":""},{"location":"#convert-a-gpx-track-file-to-mw-xml-mission-file","title":"Convert a GPX track file to MW XML mission file","text":"<pre><code>$ impload convert test.gpx gpx_trk.mission\n</code></pre>"},{"location":"#store-a-apmplanner2-mission-file-to-eeprom","title":"Store a apmplanner2 mission file to EEPROM","text":"<p>impload supports the following QGC WP types:</p> <ul> <li> <p>Waypoint (16)</p> </li> <li> <p>Poshold_time (19)</p> </li> <li> <p>RTH (20)</p> </li> <li> <p>Land (21)</p> </li> <li> <p>Jump (177)</p> </li> <li> <p>SET_ROI (201)</p> </li> <li> <p>DO_SET_ROI_LOCATION (195)</p> </li> <li> <p>DO_SET_ROI_NONE (197)</p> </li> <li> <p>DO_CONDITION_YAW (115)</p> </li> </ul> <p>with the following recommendations / restrictions:</p> <ul> <li> <p>Provide explicit positions rather that 'use previous' values</p> </li> <li> <p>Jump to geo-referenced WPs</p> </li> </ul> <p>Tabular list of WP types showing conversions and more detail on the ROI / YAW settings and restrictions.</p> <pre><code>$ impload store samples/qpc_0.txt\n2018/05/24 18:09:10 Using device /dev/ttyUSB0 115200\nINAV v2.0.0 SPRACINGF3 (e7ca7944) API 2.2 \"vtail\"\nWaypoints: 0 of 60, valid 0\nupload 12, save true\nSaved Mission\nWaypoints: 12 of 60, valid 1\n</code></pre>"},{"location":"#upload-a-kml-file-to-inav","title":"Upload a KML file to inav","text":"<pre><code>$ impload upload samples/google-earth-mission.kml\n2018/05/29 20:07:26 Using device /dev/ttyUSB0 115200\nINAV v2.0.0 SPRACINGF3 (6ccd0cc9) API 2.2 \"vtail\"\nWaypoints: 0 of 60, valid 0\nupload 9, save false\nWaypoints: 9 of 60, valid 1\n</code></pre>"},{"location":"#sample-images","title":"Sample Images","text":"<p>Note that 'home' is notional in all cases, as we\u2019re not at the field. It is not required by inav mission planners (mwp, ezgui, mission planner for inav et al).</p>"},{"location":"#qgc-survey","title":"QGC Survey","text":"<p>Original survey plan:</p> <p></p> <p>In mwp after <code>impload convert</code>:</p> <p></p>"},{"location":"#sample-qgc-in-apmplanner2","title":"Sample QGC in apmplanner2","text":"<p>Note that WP 0 is 'home' and doesn\u2019t count; WP 12 indicates RTH.</p> <p></p>"},{"location":"#sample-qgc-in-apmplanner2_1","title":"Sample QGC in apmplanner2","text":""},{"location":"#sample-in-mwp","title":"Sample in mwp","text":"<p>The sample apm text file was uploaded to the FC, and downloaded into mwp.</p> <p></p>"},{"location":"#sample-as-gpx","title":"Sample as GPX","text":"<p>The sample apm file as converted to an MW XML mission, then to a GPX (using mwptools' mission2gpx.rb), then loaded into the FC. Somewhat contrived use case.</p> <p></p> <pre><code>$ impload convert samples/qpc_1.txt /tmp/qpc_1.mission\n$ mission2gpx.rb /tmp/qpc_1.mission /tmp/qpc_1_trk.gpx\n$ impload store tmp/qpc_1_trk.gpx\n</code></pre>"},{"location":"#csv-format","title":"CSV Format","text":"<p>impload can upload and convert missions defined by a simple CSV file. The header line must be present and must be one of:</p> <pre><code>no,wp,lat,lon,alt,p1,p2\n</code></pre> <p>or</p> <pre><code>wp,lat,lon,alt,p1,p2\n</code></pre> <p>i.e. the waypoint number is optional.</p> <p>As of impload v3.021.370 (2021-01-21), impload supports all the inav 2.6 waypoint types, as either text or numeric values for CSV import.</p> <p>Sample files:</p> <pre><code>no,wp,lat,lon,alt,p1,p2\n1,WAYPOINT,54.353319318038153,-4.5179273723848077,35,0.0,0\n2,WAYPOINT,54.353572350395972,-4.5193913118652516,35,0.0,0\n3,WAYPOINT,54.354454163955907,-4.5196617811150759,50,0.0,0\n4,WAYPOINT,54.354657830207479,-4.5186895986330455,50,0.0,0\n5,JUMP,0,0,0,2,2\n6,WAYPOINT,54.354668848061756,-4.5176009696657218,35,0.0,0\n7,WAYPOINT,54.354122567317191,-4.5172673708680122,35,0.0,0\n8,JUMP,0,0,0,1,1\n9,POSHOLD_TIME,54.353138333126651,-4.5190405596657968,35,45,0.0\n10,WAYPOINT,54.354847022143616,-4.518210497615712,35,0.0,0\n11,LAND,54.354052100964488,-4.5178091504726012,60,0,0\n</code></pre> <p>and without numbers, and 'lazy' wp name and some numeric values.</p> <pre><code>wp,lat,lon,alt,p1,p2\nWP,54.353319318038153,-4.5179273723848077,35,0.0,0\nWP,54.353572350395972,-4.5193913118652516,35,0.0,0\nWP,54.354454163955907,-4.5196617811150759,50,0.0,0\nWP,54.354657830207479,-4.5186895986330455,50,0.0,0\nJUMP,0,0,0,2,2\nWP,54.354668848061756,-4.5176009696657218,35,0.0,0\nWP,54.354122567317191,-4.5172673708680122,35,0.0,0\n6,0,0,0,1,1\nPOSHOLD_TIME,54.353138333126651,-4.5190405596657968,35,45,0.0\nWP,54.354847022143616,-4.518210497615712,35,0.0,0\n8,54.354052100964488,-4.5178091504726012,60,0,0\n</code></pre> <p>Both result in the following XML mission file:</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;mission&gt;\n  &lt;!--Created by \"impload\" v2.087.278 on 2020-03-27T07:47:46Z\n      &lt;https://github.com/stronnag/impload&gt;\n  --&gt;\n  &lt;version value=\"impload v2.087.278\"/&gt;\n  &lt;missionitem no=\"1\" action=\"WAYPOINT\" lat=\"54.35331931803815\" lon=\"-4.517927372384808\" alt=\"35\" parameter1=\"0\" parameter2=\"0\" parameter3=\"0\"/&gt;\n  &lt;missionitem no=\"2\" action=\"WAYPOINT\" lat=\"54.35357235039597\" lon=\"-4.519391311865252\" alt=\"35\" parameter1=\"0\" parameter2=\"0\" parameter3=\"0\"/&gt;\n  &lt;missionitem no=\"3\" action=\"WAYPOINT\" lat=\"54.35445416395591\" lon=\"-4.519661781115076\" alt=\"50\" parameter1=\"0\" parameter2=\"0\" parameter3=\"0\"/&gt;\n  &lt;missionitem no=\"4\" action=\"WAYPOINT\" lat=\"54.35465783020748\" lon=\"-4.5186895986330455\" alt=\"50\" parameter1=\"0\" parameter2=\"0\" parameter3=\"0\"/&gt;\n  &lt;missionitem no=\"5\" action=\"JUMP\" lat=\"0\" lon=\"0\" alt=\"0\" parameter1=\"2\" parameter2=\"2\" parameter3=\"0\"/&gt;\n  &lt;missionitem no=\"6\" action=\"WAYPOINT\" lat=\"54.354668848061756\" lon=\"-4.517600969665722\" alt=\"35\" parameter1=\"0\" parameter2=\"0\" parameter3=\"0\"/&gt;\n  &lt;missionitem no=\"7\" action=\"WAYPOINT\" lat=\"54.35412256731719\" lon=\"-4.517267370868012\" alt=\"35\" parameter1=\"0\" parameter2=\"0\" parameter3=\"0\"/&gt;\n  &lt;missionitem no=\"8\" action=\"JUMP\" lat=\"0\" lon=\"0\" alt=\"0\" parameter1=\"1\" parameter2=\"1\" parameter3=\"0\"/&gt;\n  &lt;missionitem no=\"9\" action=\"POSHOLD_TIME\" lat=\"54.35313833312665\" lon=\"-4.519040559665797\" alt=\"35\" parameter1=\"45\" parameter2=\"0\" parameter3=\"0\"/&gt;\n  &lt;missionitem no=\"10\" action=\"WAYPOINT\" lat=\"54.354847022143616\" lon=\"-4.518210497615712\" alt=\"35\" parameter1=\"0\" parameter2=\"0\" parameter3=\"0\"/&gt;\n  &lt;missionitem no=\"11\" action=\"LAND\" lat=\"54.35405210096449\" lon=\"-4.517809150472601\" alt=\"60\" parameter1=\"0\" parameter2=\"0\" parameter3=\"0\"/&gt;\n&lt;/mission&gt;\n</code></pre> <p>Note that <code>p1</code> (aka <code>parameter1</code> in MW XML) is the leg speed (m/s) for WAYPOINTs and the landing flag for RTH (1 = land). <code>alt</code> (altitude) is integer metres. These parameters (and others) are fully described in the inav wiki. There is also an animated preview of this mission as a short youtube video.</p>"},{"location":"#csv-upload-visualised-in-mwp","title":"CSV upload visualised in mwp","text":""},{"location":"#note-also","title":"Note also","text":"<ul> <li>impload enforces inav mission sanity rules.</li> </ul>"},{"location":"#postscript","title":"Postscript","text":"<p>The author knows how to spell \"implode\".</p>"},{"location":"QGC-WP-110-supported-WP-types/","title":"Conversion between QGC waypoints and inav","text":"QGC WP 110 Type QGC numeric value inav WP WAYPOINT 16 WAYPOINT WAYPOINT (with hold time) 16 POSHOLD_TIME Loiter Time 19 POSHOLD_TIME Jump to index 177 JUMP Return to launch 20 RTH Land 21 LAND SET_ROI 201 SET_POI DO_SET_ROI_LOCATION 195 SET_POI DO_SET_ROI_NONE 197 SET_HEAD (-1) DO_CONDITION_YAW 115 SET_HEAD <p>Conversion will fail for any other QGC WP 110 WP types.</p> <p>Note that the whole SET_POI / SET_HEAD / SET_ROI / DO_SET_ROI_LOCATION / DO_SET_ROI_NONE /  DO_CONDITION_YAW is somewhat problematic.</p> <ul> <li> <p>SET_ROI / DO_SET_ROI_LOCATION are always mapped to SET_POI regardless of any QGC parameters (which don't seem to be set consistently / if at all between apmplanner and qgroundcontrol.</p> </li> <li> <p>DO_SET_ROI_NONE is always mapped to SET_HEAD with P1 = -1</p> </li> <li>DO_CONDITION_YAW with P1 = 0 and P4 = 0 is mapped to SET_HEAD P1 = -1, any other combinations are mapped to SET_HEAD P1.</li> </ul>"}]}